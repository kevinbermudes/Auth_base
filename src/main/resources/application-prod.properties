# PERFIL DE PRODUCCION
## BASE DE DATOS
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DATABASE:panaderia}
# Usuario y contraseña de la base de datos
spring.datasource.username=${DATABASE_USER:admin}
spring.datasource.password=${DATABASE_PASSWORD:admin123}
# Habilitamos los mensajes sql en el log para ver las consultas, quitar en producción
# spring.jpa.show-sql=true
spring.jpa.open-in-view=false
# Habilitamos que cargue los datos de prueba en la base de datos
# estos datos los carga del fichero data.sql del directorio resources, quitar en producción
spring.jpa.defer-datasource-initialization=false
# Habilitamos la creación de la base de datos en cada arranque, quitar en producción
spring.jpa.hibernate.ddl-auto=update
# Habilitamos la carga de datos de prueba en cada arranque, quitar en producción
spring.sql.init.mode=never
# Habilitamos el dialecto
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
### MONGO DB
## Configuración de la base de datos MongoDB en base a variables de entorno
#spring.data.mongodb.host=${MONGO_HOST:localhost}
#spring.data.mongodb.port=${MONGO_PORT:27017}
#spring.data.mongodb.database=${MONGO_DB:panaderia}
#spring.data.mongodb.username=${DATABASE_USER:admin}
#spring.data.mongodb.password=${DATABASE_PASSWORD:admin123}
## SWAGGER
# Habilitamos swagger, quitar en producción
springdoc.swagger-ui.enabled=false
## ALMACENAMIENTO DE FICHEROS
upload.delete=false


# Solo tus dominios reales de frontend
#¿Y si quiero usar varios orígenes separados?
#No uses espacios, sepáralos por comas como:  cors.allowed-origins=https://miapp.com,https://admin.miapp.com
cors.allowed-origins=https://miapp.com,https://admin.miapp.com

# web socket
websocket.url=notificaciones
websocket.entity=Notificacion
